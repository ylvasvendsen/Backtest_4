import pandas as pd
import pandas_ta as ta

df = pd.read_csv("AAPL.csv")

#Check if NA values are in data

df.reset_index(drop=True, inplace=True)
df.isna().sum()
df.tail()

df=df[df.High!=df.Low]


def support(df1, l, n1, n2): #n1 n2 before and after candle l
    for i in range(l-n1+1, l+1):
        if(df1.low[i]>df1.low[i-1]):
            return 0
    for i in range(l+1,l+n2+1):
        if(df1.low[i]<df1.low[i-1]):
            return 0
    return 1

def resistance(df1, l, n1, n2): #n1 n2 before and after candle l
    for i in range(l-n1+1, l+1):
        if(df1.high[i]<df1.high[i-1]):
            return 0
    for i in range(l+1,l+n2+1):
        if(df1.high[i]>df1.high[i-1]):
            return 0
    return 1


length = len(df)
high = list(df['High'])
low = list(df['Low'])
close = list(df['Close'])
open = list(df['Open'])
adj_close = list(df['Adj Close'])  # Including 'Adj Close' as requested
bodydiff = [0] * length

highdiff = [0] * length
lowdiff = [0] * length
ratio1 = [0] * length
ratio2 = [0] * length

def isEngulfing(l):
    row = l
    bodydiff[row] = abs(open[row] - close[row])
    if bodydiff[row] < 0.000001:
        bodydiff[row] = 0.000001      

    bodydiffmin = 0.002
    if (bodydiff[row] > bodydiffmin and bodydiff[row-1] > bodydiffmin and
        open[row-1] < close[row-1] and
        open[row] > close[row] and 
        (open[row] - close[row-1]) >= -0e-5 and close[row] < open[row-1]):  # +0e-5 -5e-5
        return 1

    elif (bodydiff[row] > bodydiffmin and bodydiff[row-1] > bodydiffmin and
          open[row-1] > close[row-1] and
          open[row] < close[row] and 
          (open[row] - close[row-1]) <= +0e-5 and close[row] > open[row-1]):  # -0e-5 +5e-5
        return 2
    else:
        return 0
       
def isStar(l):
    bodydiffmin = 0.0020
    row = l
    highdiff[row] = high[row] - max(open[row], close[row])
    lowdiff[row] = min(open[row], close[row]) - low[row]
    bodydiff[row] = abs(open[row] - close[row])
    if bodydiff[row] < 0.000001:
        bodydiff[row] = 0.000001
    ratio1[row] = highdiff[row] / bodydiff[row]
    ratio2[row] = lowdiff[row] / bodydiff[row]

    if (ratio1[row] > 1 and lowdiff[row] < 0.2 * highdiff[row] and bodydiff[row] > bodydiffmin):
        return 1
    elif (ratio2[row] > 1 and highdiff[row] < 0.2 * lowdiff[row] and bodydiff[row] > bodydiffmin):
        return 2
    else:
        return 0
    
def closeResistance(l, levels, lim):
    if len(levels) == 0:
        return 0
    c1 = abs(df['High'][l] - min(levels, key=lambda x: abs(x - df['High'][l]))) <= lim
    c2 = abs(max(df['Open'][l], df['Close'][l]) - min(levels, key=lambda x: abs(x - df['High'][l]))) <= lim
    c3 = min(df['Open'][l], df['Close'][l]) < min(levels, key=lambda x: abs(x - df['High'][l]))
    c4 = df['Low'][l] < min(levels, key=lambda x: abs(x - df['High'][l]))
    if (c1 or c2) and c3 and c4:
        return 1
    else:
        return 0
    
def closeSupport(l, levels, lim):
    if len(levels) == 0:
        return 0
    c1 = abs(df['Low'][l] - min(levels, key=lambda x: abs(x - df['Low'][l]))) <= lim
    c2 = abs(min(df['Open'][l], df['Close'][l]) - min(levels, key=lambda x: abs(x - df['Low'][l]))) <= lim
    c3 = max(df['Open'][l], df['Close'][l]) > min(levels, key=lambda x: abs(x - df['Low'][l]))
    c4 = df['High'][l] > min(levels, key=lambda x: abs(x - df['Low'][l]))
    if (c1 or c2) and c3 and c4:
        return 1
    else:
        return 0


import pandas as pd

df.columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']

n1 = 2
n2 = 2
backCandles = 30
length = len(df)
signal = [0] * length

def support(df1, l, n1, n2):
    for i in range(l-n1+1, l+1):
        if(df1['Low'][i] > df1['Low'][i-1]):
            return 0
    for i in range(l+1, l+n2+1):
        if(df1['Low'][i] < df1['Low'][i-1]):
            return 0
    return 1

def resistance(df1, l, n1, n2):
    for i in range(l-n1+1, l+1):
        if(df1['High'][i] < df1['High'][i-1]):
            return 0
    for i in range(l+1, l+n2+1):
        if(df1['High'][i] > df1['High'][i-1]):
            return 0
    return 1

# Processing loop
for row in range(backCandles, len(df)-n2):
    ss = []
    rr = []
    for subrow in range(row-backCandles+n1, row+1):
        if support(df, subrow, n1, n2):
            ss.append(df['Low'][subrow])
        if resistance(df, subrow, n1, n2):
            rr.append(df['High'][subrow])

    # Use existing functions: isEngulfing, isStar, closeResistance, closeSupport
    if ((isEngulfing(row) == 1 or isStar(row) == 1) and closeResistance(row, rr, 150e-5)):
        signal[row] = 1
    elif ((isEngulfing(row) == 2 or isStar(row) == 2) and closeSupport(row, ss, 150e-5)):
        signal[row] = 2
    else:
        signal[row] = 0



df['signal']=signal


df[df['signal']==1].count()


df.columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume', 'signal']



def SIGNAL():
    return df.signal


from backtesting import Strategy

class MyCandlesStrat(Strategy):  
    def init(self):
        super().init()
        self.signal1 = self.I(SIGNAL)

    def next(self):
        super().next() 
        if self.signal1==2:
            sl1 = self.data.Close[-1] - 600e-4
            tp1 = self.data.Close[-1] + 450e-4
            self.buy(sl=sl1, tp=tp1)
        elif self.signal1==1:
            sl1 = self.data.Close[-1] + 600e-4
            tp1 = self.data.Close[-1] - 450e-4
            self.sell(sl=sl1, tp=tp1)


from backtesting import Backtest

bt = Backtest(df, MyCandlesStrat, cash=600, commission=.0001)
stat = bt.run()
stat



Return [%]                          -9.067414
